name: Deploy Application

on:
  push:
    branches:
      - develop
      - master

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Get latest tag
        id: latest_tag
        run: |
          VERSION_PREFIX="v"
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "$VERSION_PREFIX0.0.0")
          echo "::set-output name=tag::$LATEST_TAG"

      - name: Calculate new tag and push
        id: extract_version
        run: |
          VERSION="${{ steps.latest_tag.outputs.tag }}"
          MAJOR=$(echo "$VERSION" | cut -d. -f1 | sed 's/v//')
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3)
          if [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            MINOR=$((MINOR + 1))
          elif [ "${{ github.ref }}" = "refs/heads/master" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
          fi
          NEW_VERSION="${VERSION_PREFIX}${MAJOR}.${MINOR}.${PATCH}"
          echo "$NEW_VERSION"
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"
  deploy:
    runs-on: ubuntu-latest
    needs: version
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "Deploying to EC2..."
          
          # Set up SSH agent and add private key
          eval $(ssh-agent -s)
          ssh-add <(echo "$EC2_SSH_KEY")
          
           # Create a tarball of the build artifacts excluding node_modules and .next
          tar --exclude='node_modules' --exclude='.next' -czf build.tar.gz *
          
          # Copy the tarball to EC2 instance
          scp -o StrictHostKeyChecking=no build.tar.gz $EC2_USER@$EC2_HOST:/home/ubuntu/app/new-portafolio-personal
          
          # SSH into EC2 instance, extract the tarball and restart the application
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            cd /app/new-portafolio-personal
            tar -xzf build.tar.gz
            rm build.tar.gz
            npm install --production
            pm2 restart portafolio-app || pm2 start npm --name "portafolio-app" -- run start
          EOF
          
          echo "Deployed to EC2"
